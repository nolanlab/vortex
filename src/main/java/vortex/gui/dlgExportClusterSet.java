/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * dlgExportClusterSet.java
 *
 * Created on 21-Mar-2011, 19:49:27
 */
package vortex.gui;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import javax.swing.JOptionPane;
import samusik.glasscmp.GlassDialog;
import sandbox.clustering.Cluster;
import sandbox.clustering.ClusterMember;
import sandbox.clustering.ClusterSet;
import util.IO;

import util.logger;

/**
 *
 * @author Nikolay
 */
public class dlgExportClusterSet extends GlassDialog {

    private ClusterSet cs;

    /**
     * Creates new form dlgExportClusterSet
     */
    public dlgExportClusterSet(java.awt.Frame parent, ClusterSet cs) {
        super(parent, true);
        this.cs = cs;
        initComponents();
        setTitle("Export Cluster Set" + cs.getID());
        setBounds(200, 200, 400, 300);
        //cmbScoringMeasure.setModel(new DefaultComboBoxModel(cs[0].getClusters()[0].getComputedScores().toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        chkIncludeScoring = new javax.swing.JCheckBox();
        chkIncludeProfiles = new javax.swing.JCheckBox();
        cmdExport = new samusik.glasscmp.GlassButton();
        txtLenThs = new javax.swing.JTextField();
        chkLenThs = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        chkIncludeScoring.setText("Include scoring information");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(chkIncludeScoring, gridBagConstraints);

        chkIncludeProfiles.setText("Include profiles");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(chkIncludeProfiles, gridBagConstraints);

        cmdExport.setText("Export");
        cmdExport.setMaximumSize(new java.awt.Dimension(100, 28));
        cmdExport.setMinimumSize(new java.awt.Dimension(100, 28));
        cmdExport.setPreferredSize(new java.awt.Dimension(100, 28));
        cmdExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(cmdExport, gridBagConstraints);

        txtLenThs.setText("0.9");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(txtLenThs, gridBagConstraints);

        chkLenThs.setText("Euclidean len threshold:");
        chkLenThs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLenThsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(chkLenThs, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExportActionPerformed
        File f2;
        if ((f2 = IO.chooseFileWithDialog("dlgExportProfiles", "Comma Separated Values (*.csv)", new String[]{"txt"}, true)) != null) {

            boolean firstRow = true;
            try (BufferedWriter br = new BufferedWriter(new FileWriter(f2))) {
                StringBuilder sb = new StringBuilder();
                for (Cluster c : cs.getClusters()) {

                    for (ClusterMember cm : c.getClusterMembers()) {
                        if (firstRow) {
                            br.write(arrToString(cm.getHeaderRow()).replace(",Barcode,", ","));
                            firstRow = false;
                        }
                        br.write(arrToString(cm.getHeaderRow()).replaceAll("clustering\\.ClusterMember.*,", ""));
                    }

                }

                br.write(sb.toString());
                br.flush();
                br.close();
            } catch (IOException e) {
                logger.showException(e);
            }
        }
        JOptionPane.showMessageDialog(this, "Export done!");
        this.setVisible(false);
    }//GEN-LAST:event_cmdExportActionPerformed

    private String arrToString(Object[] arr) {
        String out = Arrays.toString(arr);
        return out.substring(1, arr.length - 1);
    }

    private void chkLenThsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLenThsActionPerformed
        //cmbScoringMeasure.setEnabled(chkLenThs.getModel().isSelected());
        //txtLenThs.setEnabled(chkLenThs.getModel().isSelected());
    }//GEN-LAST:event_chkLenThsActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkIncludeProfiles;
    private javax.swing.JCheckBox chkIncludeScoring;
    private javax.swing.JCheckBox chkLenThs;
    private samusik.glasscmp.GlassButton cmdExport;
    private javax.swing.JTextField txtLenThs;
    // End of variables declaration//GEN-END:variables
}
