/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * dlgConfiguration.java
 *
 * Created on 22-Sep-2010, 00:59:01
 */
package vortex.gui;

import sandbox.clustering.Mode;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import samusik.glasscmp.GlassDialog;
import util.logger;
import vortex.gui.BarCodeTableCellRenderer.BarCodeOptions;
import vortex.util.Config;
import vortex.util.ConnectionManager;

/**
 *
 * @author Nikolay
 */
public class dlgConfiguration extends GlassDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form dlgConfiguration
     */
    public dlgConfiguration(Frame frm) {
        super(frm, true);

    }

    @Override
    protected void dialogInit() {
        super.dialogInit();
        initComponents();
        setModal(true);
        setBounds(100, 100, 600, 400);
        loadBarCodeOptions();
        jCheckBox1.setSelected(Mode.isUseMedian());
        jCheckBox1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Mode.setUseMedian(jCheckBox1.isSelected());
            }
        });
        cmbConnection.setModel(getCBMwithDBHosts());
        for (int i = 0; i < cmbConnection.getItemCount(); i++) {
            if (Config.getDefaultDatabaseHost() != null && cmbConnection!=null && cmbConnection.getItemAt(i)!=null) {
                if (cmbConnection.getItemAt(i).toString().equals(Config.getDefaultDatabaseHost().toString())) {
                    cmbConnection.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    private DefaultComboBoxModel getCBMwithDBHosts() {
        ConnectionManager.DatabaseHost[] h = Config.getAvailableDatabaseHosts();
        DefaultComboBoxModel cm = new DefaultComboBoxModel();
        cm.addElement("--New host connection--");
        for (ConnectionManager.DatabaseHost databaseHost : h) {
            cm.addElement(databaseHost);
        }
        return cm;
    }

    private void loadBarCodeOptions() {
        BarCodeTableCellRenderer.BarCodeOptions options = Config.loadBarCodeOptions();

        switch (options.getStyle()) {
            case DASHES:
                rbBarCodeDashes.setSelected(true);
                break;
            case STRIPES:
                rbBarCodeStripes.setSelected(true);
                break;
        }
        panBarcodeColorDown.setBackground(options.getCOLOR_DOWN());
        panBarcodeColorUp.setBackground(options.getCOLOR_UP());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        tabOptions = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmbConnection = new samusik.glasscmp.GlassComboBox();
        cmdDelete1 = new samusik.glasscmp.GlassButton();
        cmdBrowseFile = new samusik.glasscmp.GlassButton();
        txtHSQLDB_FilePath = new samusik.glasscmp.GlassEdit();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtInstanceName = new samusik.glasscmp.GlassEdit();
        cmdDone1 = new samusik.glasscmp.GlassButton();
        glassPanel1 = new samusik.glasscmp.GlassPanel();
        panBarcodeColorUp = new javax.swing.JPanel();
        panBarcodeColorDown = new javax.swing.JPanel();
        rbBarCodeDashes = new javax.swing.JRadioButton();
        rbBarCodeStripes = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        chkRainbow = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        cmdDone = new samusik.glasscmp.GlassButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuration");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Select database server connection:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel6, gridBagConstraints);

        cmbConnection.setMaximumSize(new java.awt.Dimension(32767, 28));
        cmbConnection.setMinimumSize(new java.awt.Dimension(62, 28));
        cmbConnection.setPreferredSize(new java.awt.Dimension(62, 28));
        cmbConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbConnectionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(cmbConnection, gridBagConstraints);

        cmdDelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Close.png"))); // NOI18N
        cmdDelete1.setToolTipText("Delete connection");
        cmdDelete1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDelete1.setIconTextGap(0);
        cmdDelete1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdDelete1.setMaximumSize(new java.awt.Dimension(36, 32));
        cmdDelete1.setMinimumSize(new java.awt.Dimension(36, 32));
        cmdDelete1.setPreferredSize(new java.awt.Dimension(36, 32));
        cmdDelete1.setVerifyInputWhenFocusTarget(false);
        cmdDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDelete1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 18, 0, 0);
        jPanel1.add(cmdDelete1, gridBagConstraints);

        cmdBrowseFile.setText("Browse");
        cmdBrowseFile.setToolTipText("New dataset");
        cmdBrowseFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdBrowseFile.setIconTextGap(0);
        cmdBrowseFile.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBrowseFile.setMaximumSize(new java.awt.Dimension(60, 29));
        cmdBrowseFile.setMinimumSize(new java.awt.Dimension(60, 29));
        cmdBrowseFile.setPreferredSize(new java.awt.Dimension(60, 29));
        cmdBrowseFile.setVerifyInputWhenFocusTarget(false);
        cmdBrowseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBrowseFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        jPanel1.add(cmdBrowseFile, gridBagConstraints);

        txtHSQLDB_FilePath.setMinimumSize(new java.awt.Dimension(62, 29));
        txtHSQLDB_FilePath.setPreferredSize(new java.awt.Dimension(62, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(txtHSQLDB_FilePath, gridBagConstraints);

        jLabel7.setText("Path to the local directory where the database is (will be) stored:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel9.setText("Database name (cannot be empty)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel9, gridBagConstraints);

        txtInstanceName.setMinimumSize(new java.awt.Dimension(62, 28));
        txtInstanceName.setPreferredSize(new java.awt.Dimension(62, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(txtInstanceName, gridBagConstraints);

        cmdDone1.setText("Clean up database");
        cmdDone1.setMaximumSize(new java.awt.Dimension(120, 20));
        cmdDone1.setMinimumSize(new java.awt.Dimension(120, 20));
        cmdDone1.setPreferredSize(new java.awt.Dimension(120, 20));
        cmdDone1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDone1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel1.add(cmdDone1, gridBagConstraints);

        tabOptions.addTab("Database Connection", jPanel1);

        glassPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Barcodes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP));
        glassPanel1.setLayout(new java.awt.GridBagLayout());

        panBarcodeColorUp.setBackground(new java.awt.Color(0, 255, 0));
        panBarcodeColorUp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        panBarcodeColorUp.setToolTipText("Click to change");
        panBarcodeColorUp.setMinimumSize(new java.awt.Dimension(200, 20));
        panBarcodeColorUp.setPreferredSize(new java.awt.Dimension(200, 20));
        panBarcodeColorUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panBarcodeColorUpMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        glassPanel1.add(panBarcodeColorUp, gridBagConstraints);

        panBarcodeColorDown.setBackground(new java.awt.Color(255, 0, 0));
        panBarcodeColorDown.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        panBarcodeColorDown.setToolTipText("Click to change");
        panBarcodeColorDown.setMaximumSize(new java.awt.Dimension(200, 20));
        panBarcodeColorDown.setMinimumSize(new java.awt.Dimension(200, 20));
        panBarcodeColorDown.setPreferredSize(new java.awt.Dimension(200, 20));
        panBarcodeColorDown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panBarcodeColorDownMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        glassPanel1.add(panBarcodeColorDown, gridBagConstraints);

        buttonGroup1.add(rbBarCodeDashes);
        rbBarCodeDashes.setText("Bar Graph");
        rbBarCodeDashes.setOpaque(false);
        rbBarCodeDashes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBarCodeDashesActionPerformed(evt);
            }
        });
        rbBarCodeDashes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rbBarCodeDashesPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        glassPanel1.add(rbBarCodeDashes, gridBagConstraints);

        rbBarCodeStripes.setBackground(new java.awt.Color(241, 239, 226));
        buttonGroup1.add(rbBarCodeStripes);
        rbBarCodeStripes.setSelected(true);
        rbBarCodeStripes.setText("Coloured Stripes");
        rbBarCodeStripes.setOpaque(false);
        rbBarCodeStripes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBarCodeStripesActionPerformed(evt);
            }
        });
        rbBarCodeStripes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rbBarCodeStripesPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 6);
        glassPanel1.add(rbBarCodeStripes, gridBagConstraints);

        jLabel1.setText("Up:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Down:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Example:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel4, gridBagConstraints);

        jPanel5.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        glassPanel1.add(jPanel5, gridBagConstraints);

        chkRainbow.setSelected(true);
        chkRainbow.setText("Rainbow color");
        chkRainbow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRainbowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        glassPanel1.add(chkRainbow, gridBagConstraints);

        jLabel5.setText("Raibow color:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        glassPanel1.add(jLabel5, gridBagConstraints);

        jCheckBox1.setBackground(new java.awt.Color(0,0,0,0));
        jCheckBox1.setText("Show cluster medians instead of means (slow)");
        jCheckBox1.setDoubleBuffered(true);
        jCheckBox1.setOpaque(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        glassPanel1.add(jCheckBox1, gridBagConstraints);

        tabOptions.addTab("Visualization", glassPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(tabOptions, gridBagConstraints);

        cmdDone.setText("Done");
        cmdDone.setMaximumSize(new java.awt.Dimension(90, 30));
        cmdDone.setMinimumSize(new java.awt.Dimension(90, 30));
        cmdDone.setPreferredSize(new java.awt.Dimension(90, 30));
        cmdDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDoneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        getContentPane().add(cmdDone, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setEnabledComp(boolean as) {
        txtHSQLDB_FilePath.setEnabled(as);
        txtInstanceName.setEnabled(as);
        cmdBrowseFile.setEnabled(as);
    }


    private void cmdDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDoneActionPerformed

        ConnectionManager.DatabaseHost dbHost = null;

        if (cmbConnection.getSelectedItem() instanceof ConnectionManager.DatabaseHost) {
            dbHost = (ConnectionManager.DatabaseHost) cmbConnection.getSelectedItem();
        }

        if (dbHost == null) {
            dbHost = new ConnectionManager.DatabaseHost(ConnectionManager.DatabaseHost.HOST_HSQLDB, txtHSQLDB_FilePath.getText().replace('\\', '/') + "/" + txtInstanceName.getText(), txtInstanceName.getText(), "sa", "");
            try {
                ConnectionManager.setDatabaseHost(dbHost);
                if (!Arrays.asList(Config.getAvailableDatabaseHosts()).contains(dbHost)) {
                    Config.addAvailableDatabaseHost(dbHost);
                }
            } catch (SQLException | IOException e) {
                logger.showException(e);
            }
        }

        try {
            Config.setDefaultDatabaseHost(dbHost);
            ConnectionManager.setDatabaseHost(dbHost);
            if (frmMain.getInstance() != null) {
                frmMain.getInstance().dsb.loadDatasets(ConnectionManager.getStorageEngine().getAvailableDatasetIDs());
            }
        } catch (SQLException | IOException e) {
            logger.showException(e);
        }

        BarCodeOptions o = BarCodeTableCellRenderer.getOptions();
        if (o == null) {
            o = new BarCodeTableCellRenderer.BarCodeOptions(panBarcodeColorUp.getBackground(), panBarcodeColorDown.getBackground(), rbBarCodeDashes.isSelected() ? BarCodeTableCellRenderer.BarcodePaintStyle.DASHES : BarCodeTableCellRenderer.BarcodePaintStyle.STRIPES, getPosNegWeight(), chkRainbow.isSelected());
        }
        Config.saveBarCodeOptions(o);
        if (frmMain.getInstance() != null) {
            frmMain.getInstance().validate();
            frmMain.getInstance().repaint();
        }
        this.setVisible(false);
    }//GEN-LAST:event_cmdDoneActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        Mode.setUseMedian(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void chkRainbowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRainbowActionPerformed
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, BarCodeTableCellRenderer.BarcodePaintStyle.STRIPES, getPosNegWeight(), chkRainbow.isSelected()));
        glassPanel1.repaint();
        frmMain.getInstance().validate();
        frmMain.getInstance().repaint();
    }//GEN-LAST:event_chkRainbowActionPerformed

    private void rbBarCodeStripesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rbBarCodeStripesPropertyChange

    }//GEN-LAST:event_rbBarCodeStripesPropertyChange

    private void rbBarCodeStripesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBarCodeStripesActionPerformed
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, BarCodeTableCellRenderer.BarcodePaintStyle.STRIPES, getPosNegWeight(), chkRainbow.isSelected()));
        glassPanel1.repaint();
        frmMain.getInstance().validate();
        frmMain.getInstance().repaint();
    }//GEN-LAST:event_rbBarCodeStripesActionPerformed

    private void rbBarCodeDashesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rbBarCodeDashesPropertyChange

    }//GEN-LAST:event_rbBarCodeDashesPropertyChange

    private void rbBarCodeDashesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBarCodeDashesActionPerformed
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, BarCodeTableCellRenderer.BarcodePaintStyle.DASHES, getPosNegWeight(), chkRainbow.isSelected()));
        glassPanel1.repaint();
        frmMain.getInstance().validate();
        frmMain.getInstance().repaint();
    }//GEN-LAST:event_rbBarCodeDashesActionPerformed

    private void panBarcodeColorDownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panBarcodeColorDownMouseClicked
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.BarcodePaintStyle style = BarCodeTableCellRenderer.getOptions().getStyle();
        d = JColorChooser.showDialog(this, "Choose color for negative values", d);
        panBarcodeColorDown.setBackground(d);
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, style, getPosNegWeight(), chkRainbow.isSelected()));
        glassPanel1.repaint();
        frmMain.getInstance().validate();
        frmMain.getInstance().repaint();
    }//GEN-LAST:event_panBarcodeColorDownMouseClicked

    private void panBarcodeColorUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panBarcodeColorUpMouseClicked
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.BarcodePaintStyle style = BarCodeTableCellRenderer.getOptions().getStyle();
        u = JColorChooser.showDialog(this, "Choose color for positive values", u);
        panBarcodeColorUp.setBackground(u);
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, style, getPosNegWeight(), chkRainbow.isSelected()));
        glassPanel1.repaint();
        frmMain.getInstance().validate();
        frmMain.getInstance().repaint();
    }//GEN-LAST:event_panBarcodeColorUpMouseClicked

    private void cmdDone1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDone1ActionPerformed

        if (ConnectionManager.getStorageEngine() != null) {
            if (JOptionPane.showConfirmDialog(this, "The database will be compacted. Once done, VorteX will be closed automatically and needs to be restarted manually. \n This operation can take a long time and should never be interrupted, otherwise the database will be damaged. \n VorteX will be unresponsive the entire time - this is normal \nDo not force-quit VorteX and make sure that your computer is plugged into a power source.", "Confirm the operation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                try {
                    ConnectionManager.getStorageEngine().compress();
                    System.exit(0);
                } catch (Exception e) {
                    logger.showException(e);
                }
            }
        }
    }//GEN-LAST:event_cmdDone1ActionPerformed

    private void cmdBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBrowseFileActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            if (f != null) {
                if (f.exists()) {
                    txtHSQLDB_FilePath.setText(f.getPath());
                    File[] db = f.listFiles(new FileFilter() {
                        @Override
                        public boolean accept(File pathname) {
                            return pathname.getName().endsWith(".data");
                        }
                    });
                    if (db.length > 0) {
                        File f2 = (File) JOptionPane.showInputDialog(this, "Select one of the existing databases or click 'Cancel' and type a new database name", "Existing databases found", JOptionPane.INFORMATION_MESSAGE, null, db, db[0]);
                        if (f2 != null) {
                            txtInstanceName.setText(f2.getName().split("\\.")[0]);
                        } else {
                            txtInstanceName.setText("");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_cmdBrowseFileActionPerformed

    private void cmdDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDelete1ActionPerformed
        if (cmbConnection.getSelectedItem() instanceof ConnectionManager.DatabaseHost) {
            Config.removeDatabaseHost((ConnectionManager.DatabaseHost) cmbConnection.getSelectedItem());
            cmbConnection.removeItem(cmbConnection.getSelectedItem());
        }
    }//GEN-LAST:event_cmdDelete1ActionPerformed

    private void cmbConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbConnectionActionPerformed
        if (cmbConnection.getSelectedItem() instanceof ConnectionManager.DatabaseHost) {
            ConnectionManager.DatabaseHost host = (ConnectionManager.DatabaseHost) cmbConnection.getSelectedItem();
            txtHSQLDB_FilePath.setText(host.address);
            txtInstanceName.setText(host.instanceName);
            if (host.instanceName.equals("local file")) {
                txtInstanceName.setText(host.address.substring(host.address.lastIndexOf(File.separator) + 1, host.address.length()));
                txtHSQLDB_FilePath.setText(host.address.substring(0, host.address.lastIndexOf(File.separator)));
            }
            setEnabledComp(false);
        } else {
            cmbConnection.setSelectedIndex(-1);
            setEnabledComp(true);
            txtHSQLDB_FilePath.setText(null);
            txtInstanceName.setText(null);
        }
    }//GEN-LAST:event_cmbConnectionActionPerformed

    private double getPosNegWeight() {
        return 0.5;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkRainbow;
    private samusik.glasscmp.GlassComboBox cmbConnection;
    private samusik.glasscmp.GlassButton cmdBrowseFile;
    private samusik.glasscmp.GlassButton cmdDelete1;
    private samusik.glasscmp.GlassButton cmdDone;
    private samusik.glasscmp.GlassButton cmdDone1;
    private samusik.glasscmp.GlassPanel glassPanel1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel panBarcodeColorDown;
    private javax.swing.JPanel panBarcodeColorUp;
    private javax.swing.JRadioButton rbBarCodeDashes;
    private javax.swing.JRadioButton rbBarCodeStripes;
    private javax.swing.JTabbedPane tabOptions;
    private samusik.glasscmp.GlassEdit txtHSQLDB_FilePath;
    private samusik.glasscmp.GlassEdit txtInstanceName;
    // End of variables declaration//GEN-END:variables
}
