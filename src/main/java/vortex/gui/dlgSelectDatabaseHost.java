/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * dlgSelectDatabaseHost.java
 *
 * Created on 11-Oct-2010, 14:44:14
 */
package vortex.gui;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import samusik.glasscmp.GlassDialog;
import vortex.util.Config;
import vortex.util.ConnectionManager;
import vortex.util.ConnectionManager.DatabaseHost;
import util.logger;
import static vortex.util.Config.addAvailableDatabaseHost;

/**
 *
 * @author Nikolay
 */
public class dlgSelectDatabaseHost extends GlassDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form dlgSelectDatabaseHost
     */
    public dlgSelectDatabaseHost(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setAlwaysOnTop(modal);

    }

    @Override
    protected void dialogInit() {
        super.dialogInit();
        initComponents();
        this.setMinimumSize(new Dimension(600, 360));
        this.setPreferredSize(new Dimension(600, 360));
        this.setMaximumSize(new Dimension(1200, 360));
        this.setBounds(getOwner().getWidth() / 2 - getPreferredSize().width / 2, getOwner().getHeight() / 2 - getPreferredSize().height / 2, getPreferredSize().width, getPreferredSize().height);

        //logger.print(getPreferredSize());
        //Thread.dumpStack();
        DefaultComboBoxModel cm = getCBMwithDBHosts();
        cmbConnection.setModel(cm);
        cmbConnection.setSelectedItem(Config.getDefaultDatabaseHost());
    }

    private DefaultComboBoxModel getCBMwithDBHosts() {
        ConnectionManager.DatabaseHost[] h = Config.getAvailableDatabaseHosts();
        DefaultComboBoxModel cm = new DefaultComboBoxModel();
        cm.addElement("--New host connection--");
        for (DatabaseHost databaseHost : h) {
            cm.addElement(databaseHost);
        }
        return cm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cmbConnection = new samusik.glasscmp.GlassComboBox();
        jLabel1 = new javax.swing.JLabel();
        cmdDelete1 = new samusik.glasscmp.GlassButton();
        cmdDone = new samusik.glasscmp.GlassButton();
        txtInstanceName = new samusik.glasscmp.GlassEdit();
        jLabel9 = new javax.swing.JLabel();
        txtHSQLDB_FilePath = new samusik.glasscmp.GlassEdit();
        jLabel7 = new javax.swing.JLabel();
        cmdBrowseFile = new samusik.glasscmp.GlassButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database Hosts");
        setMinimumSize(new java.awt.Dimension(501, 100));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        cmbConnection.setMaximumSize(new java.awt.Dimension(32767, 28));
        cmbConnection.setMinimumSize(new java.awt.Dimension(62, 28));
        cmbConnection.setPreferredSize(new java.awt.Dimension(62, 28));
        cmbConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbConnectionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 5);
        getContentPane().add(cmbConnection, gridBagConstraints);

        jLabel1.setText("Select database server connection:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        cmdDelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vortex/resources/Close.png"))); // NOI18N
        cmdDelete1.setToolTipText("Delete connection");
        cmdDelete1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDelete1.setIconTextGap(0);
        cmdDelete1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdDelete1.setMaximumSize(new java.awt.Dimension(36, 32));
        cmdDelete1.setMinimumSize(new java.awt.Dimension(36, 32));
        cmdDelete1.setPreferredSize(new java.awt.Dimension(36, 32));
        cmdDelete1.setVerifyInputWhenFocusTarget(false);
        cmdDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDelete1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(cmdDelete1, gridBagConstraints);

        cmdDone.setText("Done");
        cmdDone.setToolTipText("New dataset");
        cmdDone.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDone.setIconTextGap(0);
        cmdDone.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdDone.setMaximumSize(new java.awt.Dimension(100, 30));
        cmdDone.setMinimumSize(new java.awt.Dimension(100, 30));
        cmdDone.setPreferredSize(new java.awt.Dimension(100, 30));
        cmdDone.setVerifyInputWhenFocusTarget(false);
        cmdDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDoneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 7, 5);
        getContentPane().add(cmdDone, gridBagConstraints);

        txtInstanceName.setMinimumSize(new java.awt.Dimension(62, 28));
        txtInstanceName.setPreferredSize(new java.awt.Dimension(62, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(txtInstanceName, gridBagConstraints);

        jLabel9.setText("Database name (cannot be empty)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jLabel9, gridBagConstraints);

        txtHSQLDB_FilePath.setMinimumSize(new java.awt.Dimension(62, 29));
        txtHSQLDB_FilePath.setPreferredSize(new java.awt.Dimension(62, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(txtHSQLDB_FilePath, gridBagConstraints);

        jLabel7.setText("Path to the local directory where the database is (will be) stored:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 5);
        getContentPane().add(jLabel7, gridBagConstraints);

        cmdBrowseFile.setText("Browse");
        cmdBrowseFile.setToolTipText("New dataset");
        cmdBrowseFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdBrowseFile.setIconTextGap(0);
        cmdBrowseFile.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBrowseFile.setMaximumSize(new java.awt.Dimension(60, 29));
        cmdBrowseFile.setMinimumSize(new java.awt.Dimension(60, 29));
        cmdBrowseFile.setPreferredSize(new java.awt.Dimension(60, 29));
        cmdBrowseFile.setVerifyInputWhenFocusTarget(false);
        cmdBrowseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBrowseFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        getContentPane().add(cmdBrowseFile, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDelete1ActionPerformed
        if (cmbConnection.getSelectedItem() instanceof ConnectionManager.DatabaseHost) {
            Config.removeDatabaseHost((ConnectionManager.DatabaseHost) cmbConnection.getSelectedItem());
            cmbConnection.removeItem(cmbConnection.getSelectedItem());
        }
    }//GEN-LAST:event_cmdDelete1ActionPerformed

    private void cmdDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDoneActionPerformed
        if (cmbConnection.getSelectedItem() instanceof ConnectionManager.DatabaseHost) {
            ConnectionManager.DatabaseHost h = (ConnectionManager.DatabaseHost) cmbConnection.getSelectedItem();
            try {

                ConnectionManager.setDatabaseHost((ConnectionManager.DatabaseHost) cmbConnection.getSelectedItem());
            } catch (SQLException | IOException e) {
                logger.showException(e);
                //JOptionPane.showMessageDialog(this, "Selected database connection in invalid. Please select a different one");
                return;
            }
            Config.setDefaultDatabaseHost(h);

            this.setVisible(false);
        } else {
            ConnectionManager.DatabaseHost host = null;
            try {
                host = new DatabaseHost(DatabaseHost.HOST_HSQLDB, txtHSQLDB_FilePath.getText() + File.separator + txtInstanceName.getText(), "local file", "sa", "password");
                try {
                    Config.addAvailableDatabaseHost(host);
                } catch (SQLInvalidAuthorizationSpecException e) {
                    host = new DatabaseHost(DatabaseHost.HOST_HSQLDB, txtHSQLDB_FilePath.getText() + File.separator + txtInstanceName.getText(), "local file", "sa", "");
                    try {
                        addAvailableDatabaseHost(host);
                    } catch (SQLException e2) {
                        logger.showException(e2);
                    }
                }
                Config.setDefaultDatabaseHost(host);
                JOptionPane.showMessageDialog(this, "Host successfully added");
            } catch (Exception e) {
                logger.showException(e);
            }
            if (host != null) {
                this.setVisible(false);
            }
        }
    }//GEN-LAST:event_cmdDoneActionPerformed

    private void cmbConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbConnectionActionPerformed
        if (cmbConnection.getSelectedItem() instanceof ConnectionManager.DatabaseHost) {
            ConnectionManager.DatabaseHost host = (ConnectionManager.DatabaseHost) cmbConnection.getSelectedItem();
            txtHSQLDB_FilePath.setText(host.address);
            txtInstanceName.setText(host.instanceName);
            if (host.instanceName.equals("local file")) {
                txtInstanceName.setText(host.address.substring(host.address.lastIndexOf(File.separator) + 1, host.address.length()));
                txtHSQLDB_FilePath.setText(host.address.substring(0, host.address.lastIndexOf(File.separator)));
            }

        } else {
            cmbConnection.setSelectedIndex(-1);
            txtHSQLDB_FilePath.setText(null);
            txtInstanceName.setText(null);
        }
    }//GEN-LAST:event_cmbConnectionActionPerformed

    private void cmdBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBrowseFileActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            if (f != null) {
                txtHSQLDB_FilePath.setText(f.getPath());
            }
        }
    }//GEN-LAST:event_cmdBrowseFileActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private samusik.glasscmp.GlassComboBox cmbConnection;
    private samusik.glasscmp.GlassButton cmdBrowseFile;
    private samusik.glasscmp.GlassButton cmdDelete1;
    private samusik.glasscmp.GlassButton cmdDone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private samusik.glasscmp.GlassEdit txtHSQLDB_FilePath;
    private samusik.glasscmp.GlassEdit txtInstanceName;
    // End of variables declaration//GEN-END:variables
}
