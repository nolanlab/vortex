/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmHierarchyPlot.java
 *
 * Created on 29-Sep-2010, 15:13:36
 */
package vortex.gui.clusterdendrogram;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import samusik.glasscmp.GlassFrame;
import samusik.glasscmp.GlassTableHeader;
import samusik.objecttable.ObjectTableModel;
import samusik.objecttable.TableModelReorderHandler;
import sandbox.clustering.ClusterSet;
import java.awt.Toolkit;

/**
 *
 * @author Nikolay
 */
public class frmHierarchyPlot extends GlassFrame {

    ObjectTableModel<ClusterSet> tm;
    /**
     * Creates new form frmHierarchyPlot
     *
     * @param clusterSets - the cluster sets you want to display
     */
    private static ArrayList<frmHierarchyPlot> instances = new ArrayList<frmHierarchyPlot>();

    public static ArrayList<frmHierarchyPlot> getInstances() {
        return (ArrayList<frmHierarchyPlot>) instances.clone();
    }

    public static frmHierarchyPlot createInstance(ClusterSet[] css) {
        frmHierarchyPlot instance = new frmHierarchyPlot(css);
        instances.add(instance);
        return instance;
    }

    private frmHierarchyPlot(ClusterSet[] css) {
        initComponents();
        lss = new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }

                ClusterSet[] cs = tm.getObjects(new ClusterSet[tm.getRowCount()]);
                ArrayList<ClusterSet> css = new ArrayList<ClusterSet>();
                for (int i : table.getSelectedRows()) {
                    css.add(cs[i]);
                }
                chp.highlightClusterSet(css);
            }
        };



        setTitle("Cluster Hierarchy Plot");
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        if (css.length > 0) {
            tm = new ObjectTableModel<ClusterSet>(css);
            table.setModel(tm);
            GlassTableHeader h = new GlassTableHeader(table.getTableHeader());
            for (int i = 0; i < tm.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setHeaderRenderer(h);
            }
            table.setTransferHandler(new TableModelReorderHandler());
            table.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (tm.getRowCount() > 0) {
                        chp.setClusterSets(tm.getObjects(new ClusterSet[tm.getRowCount()]));
                    }
                }
            });
            table.getSelectionModel().addListSelectionListener(lss);


            chp.setClusterSets(css);
        }
        int width = Toolkit.getDefaultToolkit().getScreenSize().width;
        int height = Toolkit.getDefaultToolkit().getScreenSize().height;
        setBounds((int)(width*0.05), (int)(height*0.05), (int)(width*0.9), (int)(height*0.9));
    }
    ListSelectionListener lss;

    public void addClusterSets(ClusterSet[] css) {
        if (tm == null && css.length > 0) {
            tm = new ObjectTableModel<ClusterSet>(css);
            table.setModel(tm);
            GlassTableHeader h = new GlassTableHeader(table.getTableHeader());
            for (int i = 0; i < tm.getColumnCount(); i++) {
                table.getColumnModel().getColumn(i).setHeaderRenderer(h);
            }
            table.setTransferHandler(new TableModelReorderHandler());
            table.getModel().addTableModelListener(new TableModelListener() {
                @Override
                public void tableChanged(TableModelEvent e) {
                    if (tm.getRowCount() > 0) {
                        chp.setClusterSets(tm.getObjects(new ClusterSet[tm.getRowCount()]));
                    }
                }
            });
            table.getSelectionModel().addListSelectionListener(lss);

            chp.setClusterSets(css);
        } else {
            for (ClusterSet clusterSet : css) {
                tm.addRow(clusterSet);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        clusterDendrogramControlPanel1 = new vortex.gui.clusterdendrogram.ClusterDendrogramControlPanel();
        chp = new vortex.gui.clusterdendrogram.ClusterDendrogramControlPanel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setResizeWeight(0.1);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel1.add(jPanel2, gridBagConstraints);
        jPanel1.add(clusterDendrogramControlPanel1, new java.awt.GridBagConstraints());

        jSplitPane1.setLeftComponent(jPanel1);
        jSplitPane1.setRightComponent(chp);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (tm == null) {
                return;
            }
            if (table.getSelectedRows().length == table.getRowCount()) {
                tm = null;
                table.setModel(new DefaultTableModel());
                chp.setClusterSets(new ClusterSet[0]);
                return;
            }

            ArrayList<ClusterSet> al = new ArrayList<ClusterSet>();
            ClusterSet[] data = ((ObjectTableModel<ClusterSet>) table.getModel()).getObjects(new ClusterSet[table.getModel().getRowCount()]);
            for (int idx : table.getSelectedRows()) {
                al.add(data[table.convertRowIndexToModel(idx)]);
            }
            for (ClusterSet clusterSet : al) {
                ((ObjectTableModel<ClusterSet>) table.getModel()).removeRow(clusterSet);
            }
        }
    }//GEN-LAST:event_tableKeyReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        instances.remove(this);
    }//GEN-LAST:event_formWindowClosed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private vortex.gui.clusterdendrogram.ClusterDendrogramControlPanel chp;
    private vortex.gui.clusterdendrogram.ClusterDendrogramControlPanel clusterDendrogramControlPanel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
