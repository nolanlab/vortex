/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KMeansParamPanel.java
 *
 * Created on 01-Dec-2009, 22:57:50
 */
package vortex.clustering;

import sandbox.clustering.DistanceMeasure;
import sandbox.clustering.AngularDistance;
import java.util.Arrays;
import java.util.Comparator;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;
import sandbox.clustering.Dataset;
import util.logger;

/**
 *
 * @author Nikolay
 */
/**
 * Creates new form KMeansParamPanel
 */
public class XshiftParamPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    DistanceMeasure dm;
    double pVal = 0.01;

    /**
     * Creates new form KMeansParamPanel
     */
    public XshiftParamPanel(DistanceMeasure dm, Dataset nd) {
         logger.print("X-Shift Param Panel init_here");
        initComponents();
        this.dm = dm;

        int max = (int) (2890 * Math.pow(nd.getNumDimensions(), -0.8));
        int min = (int) (1942 * Math.pow(nd.getNumDimensions(), -1.61));
        min = Math.max(3,Math.min (min,1000));
        max = Math.max(3,Math.min (max,1000));
        spinFKFrom.setModel(new SpinnerNumberModel(max, 3, 1000, 1));
        spinFKTo.setModel(new SpinnerNumberModel(min, 3, 1000, 1));

        if (!(dm instanceof AngularDistance)) {
            cmbKernel.setModel(new DefaultComboBoxModel(new String[]{"N nearest neighbors"}));
        }
    }
    
    public int getNSize(Dataset ds){
        if(jCheckBox1.isSelected()){
        return (int) (Math.max(0.5*(ds.getNumDimensions() + 1), -(int) Math.ceil(Math.log(pVal / ds.size()) / Math.log(2))));}else{
            return (int)spinNSize.getValue();
        }
    }
    
    public Integer[] getKNN() {
        int from, to, steps;
        double step;
        from = (Integer) ((SpinnerNumberModel) spinFKFrom.getModel()).getNumber();
        to = (Integer) ((SpinnerNumberModel) spinFKTo.getModel()).getNumber();
        steps = (Integer) ((SpinnerNumberModel) spinFKStep.getModel()).getNumber();
        step = (steps == 1) ? 0 : ((double) to - (double) from) / (double) (steps - 1);

        Integer[] out = new Integer[steps];

        for (int i = 0; i < steps; i++) {
            out[i] = (int) (from + (step * i));
        }

        Arrays.sort(out, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return (cmbKernel.getSelectedIndex() * (-1)) * (o2 - o1);
            }
        });
        return out;
    }

    public DistanceMeasure getDistanceMeasure() {
        return dm;
    }

    public boolean getvMF() {
        return cmbKernel.getSelectedIndex() == 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        spinFKFrom = new javax.swing.JSpinner();
        spinFKTo = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        spinFKStep = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbKernel = new samusik.glasscmp.GlassComboBox();
        jLabel14 = new javax.swing.JLabel();
        spinNSize = new javax.swing.JSpinner();
        jCheckBox1 = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(300, 90));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(300, 90));
        setLayout(new java.awt.GridBagLayout());

        //spinFKFrom.setModel(new javax.swing.SpinnerNumberModel(150, null, null, 1));
        spinFKFrom.setMaximumSize(new java.awt.Dimension(60, 25));
        spinFKFrom.setMinimumSize(new java.awt.Dimension(60, 25));
        spinFKFrom.setPreferredSize(new java.awt.Dimension(60, 25));
        spinFKFrom.setValue(150
        );
        spinFKFrom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinFKFromStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        add(spinFKFrom, gridBagConstraints);

        //spinFKTo.setModel(new javax.swing.SpinnerNumberModel(5, null, null, 1));
        spinFKTo.setMaximumSize(new java.awt.Dimension(60, 25));
        spinFKTo.setMinimumSize(new java.awt.Dimension(60, 25));
        spinFKTo.setPreferredSize(new java.awt.Dimension(60, 25));
        spinFKTo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinFKToStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(spinFKTo, gridBagConstraints);

        jLabel7.setForeground(new java.awt.Color(0, 51, 102));
        jLabel7.setText("From");
        jLabel7.setMaximumSize(new java.awt.Dimension(60, 14));
        jLabel7.setMinimumSize(new java.awt.Dimension(60, 14));
        jLabel7.setPreferredSize(new java.awt.Dimension(60, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 10, 2, 0);
        add(jLabel7, gridBagConstraints);

        jLabel8.setForeground(new java.awt.Color(0, 51, 102));
        jLabel8.setText("To");
        jLabel8.setMaximumSize(new java.awt.Dimension(60, 14));
        jLabel8.setMinimumSize(new java.awt.Dimension(60, 14));
        jLabel8.setPreferredSize(new java.awt.Dimension(60, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 6, 2, 0);
        add(jLabel8, gridBagConstraints);

        spinFKStep.setModel(new javax.swing.SpinnerNumberModel(30, 1, null, 1));
        spinFKStep.setMaximumSize(new java.awt.Dimension(60, 25));
        spinFKStep.setMinimumSize(new java.awt.Dimension(60, 25));
        spinFKStep.setPreferredSize(new java.awt.Dimension(60, 25));
        spinFKStep.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinFKStepStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(spinFKStep, gridBagConstraints);

        jLabel12.setForeground(new java.awt.Color(0, 51, 102));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Steps");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel12, gridBagConstraints);

        jLabel13.setForeground(new java.awt.Color(0, 51, 102));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Num. neighbors for mode finding (N)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 1, 4);
        add(jLabel13, gridBagConstraints);

        jLabel10.setForeground(new java.awt.Color(0, 51, 102));
        jLabel10.setText("Density estimate:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        add(jLabel10, gridBagConstraints);

        cmbKernel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N nearest neighbors (fast)", "von Mises-Fisher kernel (slow but smooth)" }));
        cmbKernel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKernelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 32, 0, 27);
        add(cmbKernel, gridBagConstraints);

        jLabel14.setForeground(new java.awt.Color(0, 51, 102));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Num. neighbors for density estimate (K)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 1, 4);
        add(jLabel14, gridBagConstraints);

        spinNSize.setModel(new javax.swing.SpinnerNumberModel(150, null, null, 1));
        spinNSize.setEnabled(false);
        spinNSize.setMaximumSize(new java.awt.Dimension(60, 25));
        spinNSize.setMinimumSize(new java.awt.Dimension(60, 25));
        spinNSize.setPreferredSize(new java.awt.Dimension(60, 25));
        spinNSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinNSizeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(spinNSize, gridBagConstraints);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Determine automatically");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 0, 0);
        add(jCheckBox1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void spinFKStepStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinFKStepStateChanged
    }//GEN-LAST:event_spinFKStepStateChanged

    private void spinFKToStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinFKToStateChanged
    }//GEN-LAST:event_spinFKToStateChanged

    private void spinFKFromStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinFKFromStateChanged
    }//GEN-LAST:event_spinFKFromStateChanged

    private void cmbKernelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKernelActionPerformed
        jLabel13.setText(cmbKernel.getSelectedIndex() == 0 ? "Num. neighbors (N)" : "Kernel concentration (kappa)");
    }//GEN-LAST:event_cmbKernelActionPerformed

    private void spinNSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinNSizeStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_spinNSizeStateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        spinNSize.setEnabled(!jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private samusik.glasscmp.GlassComboBox cmbKernel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSpinner spinFKFrom;
    private javax.swing.JSpinner spinFKStep;
    private javax.swing.JSpinner spinFKTo;
    private javax.swing.JSpinner spinNSize;
    // End of variables declaration//GEN-END:variables
}
